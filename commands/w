#!/usr/bin/env python3

# http://inamidst.com/saxo/
# Created by Sean B. Palmer

import re
import urllib.parse
import os
import saxo
import common

uri = "http://en.wiktionary.org/w/index.php?title=%s&printable=yes"
r_tag = re.compile(r"<[^>]+>")
r_ul = re.compile(r"(?ims)<ul>.*?</ul>")

parts = ("preposition", "particle", "noun", "verb",
         "adjective", "adverb", "interjection", "prefix", "suffix")

def text(html):
    text = r_tag.sub("", html).strip()
    text = text.replace("\n", " ")
    text = text.replace("\r", "")
    text = text.replace("(intransitive", "(intr.")
    text = text.replace("(transitive", "(trans.")
    return text

def wiktionary(word):
    page = saxo.request(uri % urllib.parse.quote(word))
    te = r_ul.sub("", page["text"])

    mode = None
    etymology = None
    definitions = {}
    for line in te.splitlines():
        search = re.search('id="([^"]+)"', line)
        if search:
            ID = search.group(1).lower()
            if ID == "etymology" or ID in parts:
                mode = ID
        elif (mode == "etymology") and ("<p>" in line):
            etymology = text(line)
        elif (mode is not None) and ("<li>" in line):
            definitions.setdefault(mode, []).append(text(line))

        if "<hr" in line:
            break
    return etymology, definitions

def format(word, definitions, number=2):
    result = word
    for part in parts:
        if part in definitions:
            defs = definitions[part][:number]
            result += " \u2014 " + ("%s: " % part)
            n = ["%s. %s" % (i + 1, e.strip(" .")) for i, e in enumerate(defs)]
            result += ", ".join(n)
    return result.strip(" .,")

@saxo.pipe
def w(word):
    if not word:
        return "Nothing to define"

    etymology, definitions = wiktionary(word)
    if not definitions:
        return "Couldn't get any definitions for %s at %s" % (word, uri % urllib.parse.quote(word))

    result = format(word, definitions)
    if len(result) < 150:
        result = format(word, definitions, 3)
    if len(result) < 150:
        result = format(word, definitions, 5)

    if len(result) > 300:
        result = result[:295] + '[...]'
    return result
